on:
  - "pull_request"
  - "push"

name: "build"

jobs:
  tests:
    name: "PHP ${{ matrix.php }}"

    env:
      extensions: "dom, json, gd, imagick"
      key: "cache-v1"

    runs-on: "${{ matrix.os }}"

    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-latest"

        php:
          - "7.0"
          - "7.1"
          - "7.2"
          - "7.3"
          - "7.4"

        coverage-driver:
          - "xdebug"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Setup cache environment"
        id: "cache-env"
        uses: "shivammathur/cache-extensions@v1"
        with:
          php-version: "${{ matrix.php }}"
          extensions: "${{ env.extensions }}"
          key: "${{ env.key }}"

      - name: "Cache extensions"
        uses: "actions/cache@v1"
        with:
          path: "${{ steps.cache-env.outputs.dir }}"
          key: "${{ steps.cache-env.outputs.key }}"
          restore-keys: "${{ steps.cache-env.outputs.key }}"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php }}"
          extensions: "${{ env.extensions }}"
          ini-values: "date.timezone='UTC'"
          coverage: "${{ matrix.coverage-driver }}"

      - name: "Determine composer cache directory on Linux"
        if: matrix.os == 'ubuntu-latest'
        run: echo "COMPOSER_CACHE_DIR=$(composer config cache-dir)" >> $GITHUB_ENV

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v1"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php${{ matrix.php }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.json') }}"
          restore-keys: |
            "php${{ matrix.php }}-composer-${{ matrix.dependencies }}-"

      - name: "Install dependencies with composer"
        run: "composer update --no-ansi --no-interaction --no-progress"

      - name: "Run tests with phpunit"
        run: "vendor/bin/phpunit --coverage-clover=coverage.xml"

      - name: "Send code coverage report to Codecov.io"
        env:
          CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
        run: "bash <(curl -s https://codecov.io/bash) || true"
